---
title: "Rawdata processing, ncORF prediciton & integradation"
output: html_document
---

## data processing
```{bash}
# cutadapt
for i in /nfs_data/changy/poj/ORF/human_riboseq/data/*.fq.gz ; do j=$(basename $i) ; echo "cutadapt -a AGATCGGAAGAGCACACGTCGTAACTCCAGTCAC -j8 --trim-n -m 18 -o data/riboseq/results/human/${j%%.fq.gz}.trim.fa.gz $i > data/riboseq/results/human/${j%%.fq.gz}.trim.log" ; done >> data/riboseq/03_human_cutadapt.sh
for i in /nfs_data/changy/poj/ORF/mouse/ribo_seq/*.fq.gz ; do j=$(basename $i) ; echo "cutadapt -a AGATCGGAAGAGCACACGTCGTAACTCCAGTCAC -j8 --trim-n -m 18 -o data/riboseq/results/mouse/${j%%.fq.gz}.trim.fa.gz $i > data/riboseq/results/mouse/${j%%.fq.gz}.trim.log" ; done >> data/riboseq/03_mouse_cutadapt.sh

# remove rRNA and tRNA
for i in data/riboseq/results/human/*.trim.fa.gz ; do echo "bowtie2 -p 8 --local --un-gz ${i%%.fa.gz}.clean.fq.gz -x /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/miscRNA/human_rtRNA -U $i >/dev/null 2>${i%%.fa.gz}.clean.log" ; done > data/riboseq/04_remove_rRNA_human.sh
for i in data/riboseq/results/mouse/*.trim.fa.gz ; do echo "bowtie2 -p 8 --local --un-gz ${i%%.fa.gz}.clean.fq.gz -x /nfs_data/database/ref_genomes/mouse_GRCm39/ens107/miscRNA/mouse_rtRNA -U $i >/dev/null 2>${i%%.fa.gz}.clean.log" ; done > data/riboseq/04_remove_rRNA_mouse.sh

# STAR mapping
for i in data/riboseq/results/mouse/*.trim.clean.fq.gz ; do j=$(basename $i) ; echo "STAR --outFilterType BySJout --runThreadN 8 --outFilterMismatchNmax 2 --genomeDir /nfs_data/database/ref_genomes/mouse_GRCm39/ens107/STAR --readFilesIn $i --outFileNamePrefix data/riboseq/results/mouse/STAR/${j%%.trim.clean.fq.gz} --readFilesCommand zcat --outSAMtype BAM SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --outFilterMultimapNmax 1 --outFilterMatchNmin 16 --alignEndsType EndToEnd --outSAMattributes NH HI AS nM NM MD" ; done > data/riboseq/07_STAR_mouse_all.sh
for i in data/riboseq/results/human/*.trim.clean.fq.gz ; do j=$(basename $i) ; echo "STAR --outFilterType BySJout --runThreadN 8 --outFilterMismatchNmax 2 --genomeDir /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/STAR --readFilesIn $i --outFileNamePrefix data/riboseq/results/human/STAR/${j%%.trim.clean.fq.gz} --readFilesCommand zcat --outSAMtype BAM SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --outFilterMultimapNmax 1 --outFilterMatchNmin 16 --alignEndsType EndToEnd --outSAMattributes NH HI AS nM NM MD" ; done > data/riboseq/07_STAR_human_all.sh

# get index
for i in data/riboseq/results/mouse/STAR/*Aligned.sortedByCoord.out.bam ; do echo "samtools index $i" ; done > data/riboseq/07_getindex_mouse.sh
for i in data/riboseq/results/human/STAR/*Aligned.sortedByCoord.out.bam ; do echo "samtools index $i" ; done > data/riboseq/07_getindex_human.sh
```

## ORF prediction
### PRICE
```{bash}
# index genome
# by default, index files are saved to the same dir as genome fasta and gtf. Meanwhile, create a ~/.gedi/genomic/${name}.oml file
mkdir price_index_hsa
/home/admin/local/Gedi_1.0.5/gedi -e IndexGenome -s Homo_sapiens.GRCh38.dna.primary_assembly.fa -a Homo_sapiens.GRCh38.107.gtf -n hsa107 -nostar -nokallisto -nobowtie
mkdir price_index_mmu
/home/admin/local/Gedi_1.0.5/gedi -e IndexGenome -s Mus_musculus.GRCm39.dna.primary_assembly.fa -a Mus_musculus.GRCm39.107.gtf -n mmu107 -nostar -nokallisto -nobowtie

# create index dir and soft links to genome sequences annotation
for i in /nfs_data/database/riboseq/human/*.trim.clean.fq.gz; do j=$(basename $i); echo /home/admin/local/Gedi_1.0.5/gedi -e Price -nthreads 8 -fdr 0.05 -skipmt -reads /nfs_data/leity/poj/forecast/data/riboseq/results/human/STAR/${j%%.trim.clean.fq.gz}Aligned.sortedByCoord.out.bam -genomic hsa107 -prefix ../human/${j%%.trim.clean.fq.gz}; done >01_predict_ORF_human.sh
for i in /nfs_data/database/riboseq/mouse/*.trim.clean.fq.gz; do j=$(basename $i); echo /home/admin/local/Gedi_1.0.5/gedi -e Price -nthreads 8 -fdr 0.05 -skipmt -reads /nfs_data/leity/poj/forecast/data/riboseq/results/mouse/STAR/${j%%.trim.clean.fq.gz}Aligned.sortedByCoord.out.bam -genomic mmu107 -prefix ../predict/${j%%.trim.clean.fq.gz}; done >01_predict_ORF_mouse.sh
```

### RiboCode
```{bash}
# activate environment and prepare annotation
source /home/admin/env_mamba.sh
mamba activate ribocode

# prepare annotation
prepare_transcripts -g Homo_sapiens.GRCh38.107.gtf -f Homo_sapiens.GRCh38.dna.primary_assembly.fa -o annot_human
prepare_transcripts -g Mus_musculus.GRCm39.107.gtf -f Mus_musculus.GRCm39.dna.primary_assembly.fa -o annot_mouse

# estimate p-site offsets
for i in /nfs_data/database/riboseq/human/*.trim.clean.fq.gz; do j=$(basename $i); echo metaplots -a annot_human -f0_percent 0.5 -r /nfs_data/leity/poj/forecast/data/riboseq/results/human/STAR/${j%%.trim.clean.fq.gz}Aligned.toTranscriptome.out.bam -o metaplots/${j%%.trim.clean.fq.gz}.metaplots; done >01_human_metaplots_human.sh
nohup /home/admin/mambaforge/bin/ParaFly -c 01_human_metaplots.sh -CPU 10 -failed_cmds 01_human_metaplots.failed.sh &
for i in /nfs_data/database/riboseq/mouse/*.trim.clean.fq.gz; do j=$(basename $i); echo metaplots -a annot_mouse -f0_percent 0.5 -r /nfs_data/leity/poj/forecast/data/riboseq/results/mouse/STAR/${j%%.trim.clean.fq.gz}Aligned.toTranscriptome.out.bam -o ribocode/metaplots/${j%%.trim.clean.fq.gz}.metaplots; done >01_mouse_metaplots_mouse.sh

# predict
for i in /nfs_data/database/riboseq/human/*.trim.clean.fq.gz; do j=$(basename $i); echo RiboCode -a annot_human -c metaplots/${j%%.trim.clean.fq.gz}.metaplots_pre_config.txt -l no -g -s ATG -A CTG,GTG,TTG -m 5 -o predict/${j%%.trim.clean.fq.gz}.metaplots_pre_config.txt ; done> 02_predict_orf_human.sh
for i in ribocode/metaplots/*_pre_config.txt; do j=$(basename $i); echo RiboCode -a annot_mouse -c $i -l no -g -s ATG -A CTG,GTG,TTG -m 5 -o ribocode/predict/$j; done>02_predict_ribocode.sh
```

### Ribo-TISH
```{bash}
# quality estimate p-site offsets human
for i in /nfs_data/database/riboseq/human/*.trim.clean.fq.gz; do j=$(basename $i); echo ribotish quality -b ${j%%.trim.clean.fq.gz}Aligned.sortedByCoord.out.bam -g /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf.gz; done >01_psite_offset_human.sh
for i in /nfs_data/database/riboseq/mouse/*.trim.clean.fq.gz; do j=$(basename $i); echo ribotish quality -b ${j%%.trim.clean.fq.gz}Aligned.sortedByCoord.out.bam -g /nfs_data/database/ref_genomes/mouse_GRCm39/ens107/Mus_musculus.GRCm39.107.gtf.gz; done >01_psite_offset_mouse.sh

# predict
for i in /nfs_data/database/riboseq/human/*.trim.clean.fq.gz; do j=$(basename $i); echo ribotish predict -p4 --minaalen 5 --alt --altcodons CTG,GTG,TTG --framebest --fsqth 0.05 -b ${j%%.trim.clean.fq.gz}Aligned.sortedByCoord.out.bam -g /nfs_data/changy/poj/ORF/human_riboseq/Homo_sapiens.GRCh38.107.gtf -f /nfs_data/changy/poj/ORF/human_riboseq/Homo_sapiens.GRCh38.dna.primary_assembly.fa -o ${j%%.trim.clean.fq.gz}_pred.txt; done >02_predict_orfs_human.sh
for i in /nfs_data/database/riboseq/mouse/*.trim.clean.fq.gz; do j=$(basename $i); echo ribotish predict -p4 --minaalen 5 --alt --altcodons CTG,GTG,TTG --framebest --fsqth 0.05 -b ${j%%.trim.clean.fq.gz}Aligned.sortedByCoord.out.bam -g /nfs_data/changy/poj/ORF/mouse_riboseq/Mus_musculus.GRCm39.107.gtf -f /nfs_data/changy/poj/ORF/mouse_riboseq/Mus_musculus.GRCm39.dna.primary_assembly.fa -o ${j%%.trim.clean.fq.gz}_pred.txt; done >02_predict_orfs_mouse.sh
```

## Process prediction results of different methods using a unified pipeline with the same set of standards
### Classify ORFs into different types
```{bash}
# PRICE
for i in price/human/*.orfs.tsv; do j=$(basename $i); echo python /home/admin/scripts/orf_type.py $i Homo_sapiens.GRCh38.107.gtf Homo_sapiens.GRCh38.107.gtf.txinfo -m price -p output_classifier/price/${j%%.orfs.tsv}_PRICE; done > 04_price_classifier_human.sh
for i in price/predict/*.orfs.tsv; do j=$(basename $i); echo python /home/admin/scripts/orf_type.py $i Mus_musculus.GRCm39.107.gtf Mus_musculus.GRCm39.107.gtf.txinfo -m price -p output_classifier/price/${j%%.orfs.tsv}_PRICE; done > 04_price_classifier_mouse.sh

# RiboCode
for i in ribocode/predict/*_collapsed.txt ; do j=$(basename $i) ; echo "python /home/admin/scripts/orf_type.py $i Homo_sapiens.GRCh38.107.gtf Homo_sapiens.GRCh38.107.gtf.txinfo -m ribocode -p output_classifier/ribocode/${j%%_collapsed.txt}_RiboCode.txt"; done > 03_RiboCode_classifier_human.sh
for i in ribocode/predict/*_collapsed.txt ; do j=$(basename $i) ; echo "python /home/admin/scripts/orf_type.py $i Mus_musculus.GRCm39.107.gtf Mus_musculus.GRCm39.107.gtf.txinfo -m ribocode -p output_classifier/ribocode/${j%%_collapsed.txt}_RiboCode.txt"; done > 03_RiboCode_classifier_mouse.sh

## Ribo-TISH
for i in ribotish/*_pred.txt ; do j=$(basename $i) ; echo "python /home/admin/scripts/orf_type.py $i Homo_sapiens.GRCh38.107.gtf Homo_sapiens.GRCh38.107.gtf.txinfo -m ribotish -p output_classifier/ribotish/${j%%_pred.txt}_RiboTISH" ; done > 03_ribotish_classifier_human.sh
for i in ribotish/*_pred.txt ; do j=$(basename $i) ; echo "python /home/admin/scripts/orf_type.py $i Mus_musculus.GRCm39.107.gtf Mus_musculus.GRCm39.107.gtf.txinfo -m ribotish -p output_classifier/ribotish/${j%%_pred.txt}_RiboTISH" ; done > 03_ribotish_classifier_mouse.sh
```

### PSite pipline
```{bash}
# PSite train
for i in data/riboseq/results/human/STAR/*Aligned.toTranscriptome.out.bam ; do j=$(basename $i) ; echo "psite train -i -t principal -e /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.appris_canonical.tsv /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.cdna.all.fa.gz $i data/riboseq/results/human/psite/${j%%Aligned.toTranscriptome.out.bam} /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf.txinfo" ; done > data/riboseq/07_psite_train_human.sh
for i in data/riboseq/results/mouse/STAR/*Aligned.toTranscriptome.out.bam ; do j=$(basename $i) ; echo "psite train -i -t principal -e /nfs_data/database/ref_genomes/mouse_GRCm39/ens107/Mus_musculus.GRCm39.107.appris_canonical.tsv /nfs_data/database/ref_genomes/mouse_GRCm39/ens107/Mus_musculus.GRCm39.cdna.all.fa.gz $i data/riboseq/results/mouse/psite/${j%%Aligned.toTranscriptome.out.bam} /nfs_data/database/ref_genomes/mouse_GRCm39/ens107/Mus_musculus.GRCm39.107.gtf.txinfo" ; done > data/riboseq/07_psite_train_mouse.sh
```

### Quantify the predicted ORFs
```{bash}
# ORF quant
for i in psite_predict/*.genome.psite.sorted.bam ; do j=$(basename $i) ; echo "psite coverage $i orf_quant/${j%%.genome.psite.sorted.bam}" ; done > 09_orfquant_BW_human.sh
for i in psite_predict/*.genome.psite.sorted.bam ; do j=$(basename $i) ; echo "psite coverage $i orf_quant/${j%%.genome.psite.sorted.bam}" ; done > 09_orfquant_BW_mouse.sh

# TX_BED12
gppy convert2bed -g Homo_sapiens.GRCh38.107.gtf > Homo_sapiens.GRCh38.107.bed
gppy convert2bed -g Mus_musculus.GRCm39.107.gtf > Mus_musculus.GRCm39.107.bed

# human
for i in output_classifier/price/*_PRICE_processed.tsv ; do j=$(basename $i) ;echo "python /home/admin/scripts/orf_quant.py orf_quant/${j%%_PRICE_processed.tsv}_fw.bw orf_quant/${j%%_PRICE_processed.tsv}_rc.bw Homo_sapiens.GRCh38.107.bed $i" ; done > 10_orfquant_price_human.sh
for i in output_classifier/ribocode/*.metaplots_pre_config.txt_RiboCode.txt_processed.tsv ; do j=$(basename $i) ;echo "python /home/admin/scripts/orf_quant.py orf_quant/${j%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_fw.bw orf_quant/${j%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_rc.bw Homo_sapiens.GRCh38.107.bed $i" ; done > 10_orfquant_ribocode_human.sh
for i in output_classifier/ribotish/*_RiboTISH_processed.tsv ; do j=$(basename $i) ;echo "python /home/admin/scripts/orf_quant.py orf_quant/${j%%_RiboTISH_processed.tsv}_fw.bw orf_quant/${j%%_RiboTISH_processed.tsv}_rc.bw Homo_sapiens.GRCh38.107.bed $i" ; done > 10_orfquant_ribotish_human.sh

# mouse
for i in output_classifier/price/*_PRICE_processed.tsv; do j=$(basename $i); echo "python /home/admin/scripts/orf_quant.py orf_quant/${j%%_PRICE_processed.tsv}_fw.bw orf_quant/${j%%_PRICE_processed.tsv}_rc.bw Mus_musculus.GRCm39.107.bed $i" ; done > 10_orfquant_price_mouse.sh
for i in output_classifier/ribocode/*.metaplots_pre_config.txt_RiboCode.txt_processed.tsv; do j=$(basename $i); echo "python /home/admin/scripts/orf_quant.py orf_quant/${j%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_fw.bw orf_quant/${j%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_rc.bw Mus_musculus.GRCm39.107.bed $i" ; done > 10_orfquant_ribocode_mouse.sh
for i in output_classifier/ribotish/*_RiboTISH_processed.tsv; do j=$(basename $i); echo "python /home/admin/scripts/orf_quant.py orf_quant/${j%%_RiboTISH_processed.tsv}_fw.bw orf_quant/${j%%_RiboTISH_processed.tsv}_rc.bw Mus_musculus.GRCm39.107.bed $i" ; done > 10_orfquant_ribotish_mouse.sh
```

### Compute Fragment Length Organization Similarity Score(FLOSS)
```{bash}
# get cdsmerge.bed
gppy convert2bed -t cds -g Homo_sapiens.GRCh38.107.gtf | bedtools bed12tobed6 | bedtools sort | bedtools merge -s -c 4,5,6 -o first > Homo_sapiens.GRCh38.107.bed6
gppy convert2bed -t cds -g Mus_musculus.GRCm39.107.gtf | bedtools bed12tobed6 | bedtools sort | bedtools merge -s -c 4,5,6 -o first > Mus_musculus.GRCm39.107.bed6

# floss
# human
for i in output_classifier/price/*_PRICE_processed.tsv; do j=$(basename $i) ; echo "python /home/admin/scripts/orf_floss.py -p 8 psite_predict/${j%%_PRICE_processed.tsv}.genome.psite.sorted.bam Homo_sapiens.GRCh38.107.gtf Homo_sapiens.GRCh38.107.gtf.txinfo Homo_sapiens.GRCh38.107.bed6 $i -o output_classifier/price/${j%%_processed.tsv}_floss.tsv " ; done > 11_floss_price_human.sh
for i in output_classifier/ribocode/*.metaplots_pre_config.txt_RiboCode.txt_processed.tsv; do j=$(basename $i) ; echo "python /home/admin/scripts/orf_floss.py -p 8 psite_predict/${j%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}.genome.psite.sorted.bam Homo_sapiens.GRCh38.107.gtf Homo_sapiens.GRCh38.107.gtf.txinfo Homo_sapiens.GRCh38.107.bed6 $i -o output_classifier/ribocode/${j%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_floss.tsv "; done > 11_floss_ribocode_human.sh
for i in output_classifier/ribotish/*_RiboTISH_processed.tsv; do j=$(basename $i) ; echo "python /home/admin/scripts/orf_floss.py -p 8 psite_predict/${j%%_RiboTISH_processed.tsv}.genome.psite.sorted.bam Homo_sapiens.GRCh38.107.gtf Homo_sapiens.GRCh38.107.gtf.txinfo Homo_sapiens.GRCh38.107.bed6 $i -o output_classifier/ribotish/${j%%_RiboTISH_processed.tsv}_floss.tsv " ; done > 11_floss_ribotish_human.sh

for i in output_classifier/price/*_PRICE_processed.tsv; do j=$(basename $i) ; echo "python /home/admin/scripts/orf_floss.py -p 8 psite_predict/${j%%_PRICE_processed.tsv}.genome.psite.sorted.bam Mus_musculus.GRCm39.107.gtf Mus_musculus.GRCm39.107.gtf.txinfo Mus_musculus.GRCm39.107.bed6 $i -o output_classifier/price/${j%%_processed.tsv}_floss.tsv " ; done > 11_floss_price_mouse.sh
for i in output_classifier/ribotish/*_RiboTISH_processed.tsv; do j=$(basename $i) ; echo "python /home/admin/scripts/orf_floss.py -p 8 psite_predict/${j%%_RiboTISH_processed.tsv}.genome.psite.sorted.bam Mus_musculus.GRCm39.107.gtf Mus_musculus.GRCm39.107.gtf.txinfo Mus_musculus.GRCm39.107.bed6 $i -o output_classifier/ribotish/${j%%_RiboTISH_processed.tsv}_floss.tsv " ; done > 11_floss_ribotish_mouse.sh
for i in output_classifier/ribocode/*.metaplots_pre_config.txt_RiboCode.txt_processed.tsv; do j=$(basename $i) ; echo "python /home/admin/scripts/orf_floss.py -p 8 psite_predict/${j%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}.genome.psite.sorted.bam Mus_musculus.GRCm39.107.gtf Mus_musculus.GRCm39.107.gtf.txinfo Mus_musculus.GRCm39.107.bed6 $i -o output_classifier/ribocode/${j%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_floss.tsv "; done > 11_floss_ribocode_mouse.sh

# floss cutoff
for i in output_classifier/price/*_floss.tsv ; do j=$(basename $i) ; echo "Rscript --vanilla /home/admin/scripts/orf_floss_cutoff.R $i ${i%%.tsv}_cutoff.tsv " ; done > 13_floss_cutoff_price_human.sh
for i in output_classifier/ribocode/*_floss.tsv ; do j=$(basename $i) ; echo "Rscript --vanilla /home/admin/scripts/orf_floss_cutoff.R $i ${i%%.tsv}_ribocode_cutoff.tsv " ; done > 13_floss_cutoff_ribocode_human.sh
for i in output_classifier/ribotish/*_floss.tsv ; do j=$(basename $i) ; echo "Rscript --vanilla /home/admin/scripts/orf_floss_cutoff.R $i ${i%%.tsv}_ribotish_cutoff.tsv " ; done > 13_floss_cutoff_ribotish_human.sh

for i in output_classifier/price/*_floss.tsv ; do j=$(basename $i) ; echo "Rscript --vanilla /home/admin/scripts/orf_floss_cutoff.R $i ${i%%.tsv}_cutoff.tsv " ; done > 13_floss_cutoff_price_mouse.sh
for i in output_classifier/ribocode/*_floss.tsv ; do j=$(basename $i) ; echo "Rscript --vanilla /home/admin/scripts/orf_floss_cutoff.R $i ${i%%.tsv}_ribocode_cutoff.tsv " ; done > 13_floss_cutoff_ribocode_mouse.sh
for i in output_classifier/ribotish/*_floss.tsv ; do j=$(basename $i) ; echo "Rscript --vanilla /home/admin/scripts/orf_floss_cutoff.R $i ${i%%.tsv}_ribotish_cutoff.tsv " ; done > 13_floss_cutoff_ribotish_mouse.sh
```

### Extract Kozak sequence context for predicted ORFs
```{bash}
# human
for i in output_classifier/price/*_PRICE_processed.tsv ; do echo "python /home/admin/scripts/orf_kozak.py -i -f /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.cdna_and_ncrna.fa $i > ${i%%_PRICE_processed.tsv}_kozak.tsv " ; done > 12_kozak_prcie_human.sh
for i in output_classifier/ribocode/*.metaplots_pre_config.txt_RiboCode.txt_processed.tsv; do echo "python /home/admin/scripts/orf_kozak.py -i -f /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.cdna_and_ncrna.fa $i > ${i%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_kozak.tsv " ; done > 12_kozak_ribocode_human.sh
for i in output_classifier/ribotish/*_RiboTISH_processed.tsv; do echo "python /home/admin/scripts/orf_kozak.py -i -f /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.cdna_and_ncrna.fa $i > ${i%%_RiboTISH_processed.tsv}_kozak.tsv " ; done > 12_kozak_ribotish_human.sh

# mouse
for i in output_classifier/price/*_PRICE_processed.tsv ; do echo "python /home/admin/scripts/orf_kozak.py -i -f /nfs_data/database/ref_genomes/mouse_GRCm39/ens107/Mus_musculus.GRCm39.cdna_and_ncrna.fa $i > ${i%%_PRICE_processed.tsv}_kozak.tsv " ; done > 12_kozak_prcie_mouse.sh
for i in output_classifier/ribocode/*.metaplots_pre_config.txt_RiboCode.txt_processed.tsv; do echo "python /home/admin/scripts/orf_kozak.py -i -f /nfs_data/database/ref_genomes/mouse_GRCm39/ens107/Mus_musculus.GRCm39.cdna_and_ncrna.fa $i > ${i%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_kozak.tsv " ; done > 12_kozak_ribocode_mouse.sh
for i in output_classifier/ribotish/*_RiboTISH_processed.tsv; do echo "python /home/admin/scripts/orf_kozak.py -i -f /nfs_data/database/ref_genomes/mouse_GRCm39/ens107/Mus_musculus.GRCm39.cdna_and_ncrna.fa $i > ${i%%_RiboTISH_processed.tsv}_kozak.tsv " ; done > 12_kozak_ribotish_mouse.sh
```

### Merge annotation
```{bash}
# human
for i in output_classifier/price/*_processed.tsv ; do echo "python /home/admin/scripts/orf_mergetab.py $i -q ${i%%_processed.tsv}_processed.orfquant.tsv -f ${i%%_processed.tsv}_floss_cutoff.tsv -k ${i%%}_kozak.tsv -o ${i%%_processed.tsv}_merge.tsv" ; done > 14_merge_price_human.sh
for i in output_classifier/ribocode/*_processed.tsv ; do echo "python /home/admin/scripts/orf_mergetab.py $i -q ${i%%_processed.tsv}_processed.orfquant.tsv -f ${i%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_floss_ribocode_cutoff.tsv -k ${i%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_kozak.tsv -o ${i%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_ribocode_merge.tsv" ; done > 14_merge_ribocode_human.sh
for i in output_classifier/ribotish/*_processed.tsv ; do echo "python /home/admin/scripts/orf_mergetab.py $i -q ${i%%_processed.tsv}_processed.orfquant.tsv -f ${i%%_RiboTISH_processed.tsv}_floss_ribotish_cutoff.tsv -k ${i%%_RiboTISH_processed.tsv}_kozak.tsv -o ${i%%_RiboTISH_processed.tsv}_ribotish_merge.tsv" ; done > 14_merge_ribotish_human.sh

# mouse
for i in output_classifier/price/*_processed.tsv ; do echo "python /home/admin/scripts/orf_mergetab.py $i -q ${i%%_processed.tsv}_processed.orfquant.tsv -f ${i%%_processed.tsv}_floss_cutoff.tsv -k ${i%%_PRICE_processed.tsv}_kozak.tsv -o ${i%%_processed.tsv}_merge.tsv" ; done > 14_merge_price_mouse.sh
for i in output_classifier/ribocode/*_processed.tsv ; do echo "python /home/admin/scripts/orf_mergetab.py $i -q ${i%%_processed.tsv}_processed.orfquant.tsv -f ${i%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_floss_ribocode_cutoff.tsv -k ${i%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_kozak.tsv -o ${i%%.metaplots_pre_config.txt_RiboCode.txt_processed.tsv}_ribocode_merge.tsv" ; done > 14_merge_ribocode_mouse.sh
for i in output_classifier/ribotish/*_processed.tsv ; do echo "python /home/admin/scripts/orf_mergetab.py $i -q ${i%%_processed.tsv}_processed.orfquant.tsv -f ${i%%_RiboTISH_processed.tsv}_floss_ribotish_cutoff.tsv -k ${i%%_RiboTISH_processed.tsv}_kozak.tsv -o ${i%%_RiboTISH_processed.tsv}_ribotish_merge.tsv" ; done > 14_merge_ribotish_mouse.sh
```

## filter ncORF
## extract reads, unique mapping reads, unique mapping reads %, multiple mapping, multiple mapped %
```{bash}
ls /nfs_data/leity/poj/forecast/data/riboseq/results/mouse/*Log.final.out |xargs -i python ~admin/scripts/parseStarLog.py {} >mouse_log_final.txt
ls /nfs_data/leity/poj/forecast/data/riboseq/results/human/*Log.final.out |xargs -i python ~admin/scripts/parseStarLog.py {} >human_log_final.txt
```

## Number of reads
```{bash}
for i in /nfs_data/database/riboseq/human/*.fastq.gz; do j=$(basename $i);echo "zcat $i | wc -l | sed s/^/$i/g"; done > 01_number_of_reads_human
for i in /nfs_data/database/riboseq/mouse/*.fastq.gz; do j=$(basename $i);echo "zcat $i | wc -l | sed s/^/$i/g"; done > 01_number_of_reads_mouse
```

```{r}
library(tidyverse)
library(data.table)
library(igraph)
```

## Three base periodicity
```{r}
# human
file_hsa <- list.files("data/Psite/human_psite", pattern = ".log", full.names = T)
file <- vector()
for (i in file_hsa){
  file <- c(file, rep(i, 3))
}
psite_hsa <- lapply(file_hsa, read.table, sep = "\t") %>%
  bind_rows %>%
  separate(V1, into = c("frame", "none", "base", "GBT"), sep = "  ") %>%
  filter(none > 0) %>%
  mutate(file = file,
         file = sub("data/Psite/human_psite/", '', file)) %>% 
  pivot_longer(cols = none:GBT, names_to = "type", values_to = "value") %>%
  mutate(type = paste0(frame,"_", type)) %>%
  select(-frame) %>% 
  pivot_wider(names_from = "type", values_from = "value")
write_tsv(psite_hsa, "data/Psite/psite_human.tsv")

# mouse
file_hsa <- list.files("data/Psite/human_psite", pattern = ".log", full.names = T)
file <- vector()
for (i in file_hsa){
  file <- c(file, rep(i, 3))
}
psite_hsa <- lapply(file_hsa, read.table, sep = "\t") %>%
  bind_rows %>%
  separate(V1, into = c("frame", "none", "base", "GBT"), sep = "  ") %>%
  filter(none > 0) %>%
  mutate(file = file,
         file = sub("data/Psite/human_psite/", '', file)) %>% 
  pivot_longer(cols = none:GBT, names_to = "type", values_to = "value") %>%
  mutate(type = paste0(frame,"_", type)) %>%
  select(-frame) %>% 
  pivot_wider(names_from = "type", values_from = "value")
write_tsv(psite_hsa, "data/Psite/psite_human.tsv")
```

## merge reads, mapping info, Three base periodicity
  -human:human_library_data_raw.tsv
  -mouse:mouse_library_data_raw.tsv
  
## filter ncORFs
```{r}
# human
data_filter <- function(dtt){
  data <- read_tsv(dtt) %>%
    mutate(chrom = as.character(chrom))
  data_CDS <- data %>%
    mutate(uid = paste(chrom, gstart, gend, strand, sep = "_")) %>%
    mutate(uid_start = paste(chrom, gstart, strand, sep = "_"), 
           uid_end = paste(chrom,  gend, strand, sep = "_")) %>%
    filter(orf_type %in% c('C_truncation','iCDS','N_extension','N_truncation','sCDS', 'wCDS')) %>%
    distinct(uid, .keep_all = T)
  
  data_ORF <- data %>% 
    mutate(uid = paste(chrom, gstart, gend, strand, sep = "_"),
           uid_start = paste(chrom, gstart, strand, sep = "_"),
           uid_end = paste(chrom,  gend, strand, sep = "_")) %>%
    filter(orf_type %in% c('uORF','uoORF','dORF','doORF','iORF','lncRNA-ORF')) %>%
    filter(start_codon %in% c('ATG', 'CTG', 'GTG', 'TTG')) %>%
    filter(!(uid_start %in% data_CDS$uid_start | uid_end %in% data_CDS$uid_end)) %>%
    filter(rrs >1, 
           floss <= floss_ubd,
           psite_total >=10,
           orf_len >= 18)
}

# read file
SRR_files <- list.files('predict_output/', pattern = '.tsv' , full.names = T)
names(SRR_files) <- sub('predict_output/.*', '', basename(SRR_files))
sum_data <- bind_rows(lapply(SRR_files, data_filter), .id = 'id') %>%   
  mutate(id = gsub('_merge.tsv', '', id)) %>%
  separate(id, into = c("library", "method"), sep = "_(?=[^_]+$)")

# cluster
cluster_by_ends <- function(dtt){
  #' @param dtt a data.table containing the three columns: uid, uid_start, uid_end
  dtt <- dtt[order(uid_start)]
  edges_start <- dtt[, .(from = uid, to = data.table::shift(uid, type = 'lead')), by = .(uid_start)]
  dtt <- dtt[order(uid_end)]
  edges_end <- dtt[, .(from = uid, to = data.table::shift(uid, type = 'lead')), by = .(uid_end)]
  
  uuid_edges <- rbind(edges_start[, 2:3], edges_end[, 2:3])
  uuid_edges <- unique(uuid_edges[!is.na(to)])
  
  uuid_graph <- graph_from_data_frame(uuid_edges, directed = FALSE, vertices = unique(dtt[, .(uid)]))
  
  uuid_components <- igraph::groups(components(uuid_graph))
  length(uuid_components)
  uuid_clusters <- data.table(
    uid = unlist(uuid_components),
    cluster_coord = rep(sprintf('cc%05d', seq_along(uuid_components)), lengths(uuid_components)))
  dtt[uuid_clusters, on = .(uid)]
}
ncorfs_id_clu <- sum_data |>                                                 
  distinct(uid, uid_start, uid_end) |>
  as.data.table() |>
  cluster_by_ends()

bio_mart <- read_tsv("../data/predict_output/ens107_human_mart_export.txt") %>% 
  mutate(`Transcript support level (TSL)` = sub(' .*', '', `Transcript support level (TSL)`),
         `Transcript support level (TSL)` = ifelse(is.na(`Transcript support level (TSL)`), 'no_tsl', `Transcript support level (TSL)`),
         `APPRIS annotation` = ifelse(is.na(`APPRIS annotation`), 'no_principal', `APPRIS annotation`))

bio_mart$`APPRIS annotation` <- factor(bio_mart$`APPRIS annotation`,
                                       levels = c('principal1', 'principal2', 'principal3',
                                                  'principal4', 'principal5', 'alternative1','alternative2', 'no_principal'))
bio_mart$`Transcript support level (TSL)` <- factor(bio_mart$`Transcript support level (TSL)`,
                                                    levels = c('tsl1', 'tsl2', 'tsl3', 'tsl4', 'tsl5', 'tslNA', 'no_tsl'))
ncorfs_all <- sum_data %>% 
  left_join(unique(ncorfs_id_clu[, .(uid, cluster = cluster_coord)]), by = 'uid') %>%
  group_by(cluster,library) %>%
  mutate(n_method = n_distinct(method)) %>%
  filter(n_method >=2) %>%
  ungroup() %>%
  group_by(cluster) %>%
  mutate(n_library = n_distinct(library)) %>%
  filter(n_library >=2) %>% 
  left_join(bio_mart[,2:5], by = c('tx_name'='Transcript stable ID')) %>%
  mutate(start_codon_levels = ifelse(start_codon == 'ATG', '1', 'NA'),
         start_codon_levels = ifelse(start_codon == 'CTG' | start_codon == 'GTG', '2', start_codon_levels),
         start_codon_levels = ifelse(start_codon == 'TTG', '3', start_codon_levels)) %>%
  arrange(`RefSeq match transcript (MANE Select)`, `APPRIS annotation`, `Transcript support level (TSL)`, 
          start_codon_levels, desc(orf_len)) %>%
  filter(!duplicated(cluster)) %>%
  ungroup()
write_tsv(ncorfs_all, "human_three_methods_ncorf.tsv")

# mouse
data_filter <- function(dtt){
  data <- read_tsv(dtt) %>%
    mutate(chrom = as.character(chrom))
  data_CDS <- data %>%
    mutate(uid = paste(chrom, gstart, gend, strand, sep = "_")) %>%
    mutate(uid_start = paste(chrom, gstart, strand, sep = "_"), 
           uid_end = paste(chrom,  gend, strand, sep = "_")) %>%
    filter(orf_type %in% c('C_truncation','iCDS','N_extension','N_truncation','sCDS', 'wCDS')) %>%
    distinct(uid, .keep_all = T)
  
  data_ORF <- data %>% 
    mutate(uid = paste(chrom, gstart, gend, strand, sep = "_"),
           uid_start = paste(chrom, gstart, strand, sep = "_"),
           uid_end = paste(chrom,  gend, strand, sep = "_")) %>%
    filter(orf_type %in% c('uORF','uoORF','dORF','doORF','iORF','lncRNA-ORF')) %>%
    filter(start_codon %in% c('ATG', 'CTG', 'GTG', 'TTG')) %>%
    filter(!(uid_start %in% data_CDS$uid_start | uid_end %in% data_CDS$uid_end)) %>%
    filter(rrs >1, 
           floss <= floss_ubd,
           psite_total >=10,
           orf_len >= 18)
}

# read file
SRR_files <- list.files('predict_output/', pattern = '.tsv' , full.names = T)
names(SRR_files) <- sub('predict_output/.*', '', basename(SRR_files))
sum_data <- bind_rows(lapply(SRR_files, data_filter), .id = 'id') %>%   
  mutate(id = gsub('_merge.tsv', '', id)) %>%
  separate(id, into = c("library", "method"), sep = "_(?=[^_]+$)")

# cluster
cluster_by_ends <- function(dtt){
  #' @param dtt a data.table containing the three columns: uid, uid_start, uid_end
  dtt <- dtt[order(uid_start)]
  edges_start <- dtt[, .(from = uid, to = data.table::shift(uid, type = 'lead')), by = .(uid_start)]
  dtt <- dtt[order(uid_end)]
  edges_end <- dtt[, .(from = uid, to = data.table::shift(uid, type = 'lead')), by = .(uid_end)]
  
  uuid_edges <- rbind(edges_start[, 2:3], edges_end[, 2:3])
  uuid_edges <- unique(uuid_edges[!is.na(to)])
  
  uuid_graph <- graph_from_data_frame(uuid_edges, directed = FALSE, vertices = unique(dtt[, .(uid)]))
  
  uuid_components <- igraph::groups(components(uuid_graph))
  length(uuid_components)
  uuid_clusters <- data.table(
    uid = unlist(uuid_components),
    cluster_coord = rep(sprintf('cc%05d', seq_along(uuid_components)), lengths(uuid_components)))
  dtt[uuid_clusters, on = .(uid)]
}
ncorfs_id_clu <- sum_data |>                                                 
  distinct(uid, uid_start, uid_end) |>
  as.data.table() |>
  cluster_by_ends()

bio_mart <- read_tsv("../data/predict_output/ens107_mouse_mart_export.txt") %>% 
  mutate(`Transcript support level (TSL)` = sub(' .*', '', `Transcript support level (TSL)`),
         `Transcript support level (TSL)` = ifelse(is.na(`Transcript support level (TSL)`), 'no_tsl', `Transcript support level (TSL)`),
         `APPRIS annotation` = ifelse(is.na(`APPRIS annotation`), 'no_principal', `APPRIS annotation`)) 
bio_mart$`APPRIS annotation` <- factor(bio_mart$`APPRIS annotation`,
                                       levels = c('principal1', 'principal2', 'principal3',
                                                  'principal4', 'principal5', 'alternative1','alternative2', 'no_principal'))
bio_mart$`Transcript support level (TSL)` <- factor(bio_mart$`Transcript support level (TSL)`,
                                                    levels = c('tsl1', 'tsl2', 'tsl3', 'tsl4', 'tsl5', 'tslNA', 'no_tsl'))

ncorfs_all <- sum_data %>% 
  left_join(unique(ncorfs_id_clu[, .(uid, cluster = cluster_coord)]), by = 'uid') %>%
  group_by(cluster,library) %>%
  mutate(n_method = n_distinct(method)) %>%
  filter(n_method >=2) %>%
  ungroup() %>%
  group_by(cluster) %>%
  mutate(n_library = n_distinct(library)) %>%
  filter(n_library >=2) %>%    
  left_join(bio_mart[,2:4], by = c('tx_name'='Transcript stable ID')) %>%
  mutate(start_codon_levels = ifelse(start_codon == 'ATG', '1', 'NA'),
         start_codon_levels = ifelse(start_codon == 'CTG' | start_codon == 'GTG', '2', start_codon_levels),
         start_codon_levels = ifelse(start_codon == 'TTG', '3', start_codon_levels)) %>%
  arrange(`APPRIS annotation`, `Transcript support level (TSL)`, start_codon_levels, desc(orf_len)) %>%
  filter(!duplicated(cluster)) %>%
  ungroup()
write_tsv(ncorfs_all, "mouse_three_methods_ncorf.tsv")
```

## Final Set of ncORFs
```{r}
read_ncorf_meta <- function(path){
    ncorf <- fread(path)
    ncorf[, .(
        uid, orf_type, orf_len, start_codon, gene_id, gene_name,
        tx_name, tstart, tend, chrom, strand, gene_biotype, transcript_biotype,
        tx_len, cds_len, utr5_len, utr3_len, uid_start, uid_end)]
}
ncorf_human <- read_ncorf_meta('data/ncorf_annot/human_three_methods_ncorf.tsv')
ncorf_mouse <- read_ncorf_meta('data/ncorf_annot/mouse_three_methods_ncorf.tsv')

# Note:
# we need to exclude transcript isoforms that are of type "protein_coding_CDS_not_defined" in the latest gene annotation.
txinfo_latest_human <- fread('data/Homo_sapiens.GRCh38.111.gtf.txinfo.tsv')
ncorf_human[txinfo_latest_human, new_txbiotype := i.transcript_biotype, on = .(tx_name)]
txinfo_latest_mouse <- fread('data/Mus_musculus.GRCm39.111.gtf.txinfo.tsv')
ncorf_mouse[txinfo_latest_mouse, new_txbiotype := i.transcript_biotype, on = .(tx_name)]

# processed_transcript
# two lncRNA (processed_transcript) becomes protein_coding in human
ncorf_human[transcript_biotype != 'protein_coding' & new_txbiotype == 'protein_coding']
txinfo_latest_human[tx_name == 'ENST00000489277']  # case 1: lncORF becomes uORF
txinfo_latest_human[tx_name == 'ENST00000640298']  # case 2: lncORF becomres CDS, should be excluded
final_ncorf_human <- ncorf_human[uid != 'X_119991051_119991680_+']

# five lncRNA becomres protein_coding in mouse, except for 4_14936442_14938514_+, all seems becomes CDS,
# of which one might be incorrect: ENSMUST00000124965
ncorf_mouse[transcript_biotype != 'protein_coding' & new_txbiotype == 'protein_coding']
txinfo_latest_mouse[tx_name %in% ncorf_mouse[transcript_biotype != 'protein_coding' & new_txbiotype == 'protein_coding']$tx_name]
tmp <- ncorf_mouse[transcript_biotype != 'protein_coding' & new_txbiotype == 'protein_coding' & uid != '4_14936442_14938514_+']
final_ncorf_mouse <- ncorf_mouse[!uid %in% tmp$uid]

# in latest release, all processed_transcript are resolved to other biological biotypes
# (mainly lncRNA and protein_coding_CDS_not_defined)
final_ncorf_human[transcript_biotype != 'protein_coding' & new_txbiotype == 'protein_coding_CDS_not_defined']
final_ncorf_mouse[transcript_biotype != 'protein_coding' & new_txbiotype == 'protein_coding_CDS_not_defined']
# to be conservative on prediction of lncRNA ORFs, we exclude those that are no-longer lncRNA
final_ncorf_human <- final_ncorf_human[!(transcript_biotype == 'processed_transcript' & new_txbiotype != 'lncRNA')]
final_ncorf_mouse <- final_ncorf_mouse[!(transcript_biotype == 'processed_transcript' & new_txbiotype != 'lncRNA')]

# cleanup
final_ncorf_human[, new_txbiotype := NULL]
final_ncorf_mouse[, new_txbiotype := NULL]
final_ncorf_human[orf_type == 'lncRNA-ORF', orf_type := 'lncORF']
final_ncorf_mouse[orf_type == 'lncRNA-ORF', orf_type := 'lncORF']

fwrite(final_ncorf_human, 'data/ncorf_annot/human_three_methods_ncorf.final.tsv')  # 12469
fwrite(final_ncorf_mouse, 'data/ncorf_annot/mouse_three_methods_ncorf.final.tsv')  # 16960
```

Generate final annotation files
```{r}
# bed
bed_human <- fread('data/ncorf_annot/human_three_methods_ncorf.bed')
bed_mouse <- fread('data/ncorf_annot/mouse_three_methods_ncorf.bed')
bed_human <- bed_human[V4 %in% final_ncorf_human$uid]
bed_mouse <- bed_mouse[V4 %in% final_ncorf_mouse$uid]
fwrite(bed_human, 'data/ncorf_annot/human_three_methods_ncorf.final.bed', sep = '\t', col.names = FALSE)
fwrite(bed_mouse, 'data/ncorf_annot/mouse_three_methods_ncorf.final.bed', sep = '\t', col.names = FALSE)

# seq
tmp_nuc_human <- Biostrings::readDNAStringSet('data/ncorf_annot/human_three_methods_ncorf.nuc.fa')
tmp_nuc_human <- tmp_nuc_human[names(tmp_nuc_human) %in% ncorfs_human$uid]
Biostrings::writeXStringSet(tmp_nuc_human, 'data/ncorf_annot/human_three_methods_ncorf.final.nuc.fa')

tmp_pep_human <- Biostrings::readAAStringSet('data/ncorf_annot/human_three_methods_ncorf.pep.fa')
tmp_pep_human <- tmp_pep_human[names(tmp_pep_human) %in% ncorfs_human$uid]
Biostrings::writeXStringSet(tmp_pep_human, 'data/ncorf_annot/human_three_methods_ncorf.final.pep.fa')

tmp_nuc_mouse <- Biostrings::readDNAStringSet('data/ncorf_annot/mouse_three_methods_ncorf.nuc.fa')
tmp_nuc_mouse <- tmp_nuc_mouse[names(tmp_nuc_mouse) %in% ncorfs_mouse$uid]
Biostrings::writeXStringSet(tmp_nuc_mouse, 'data/ncorf_annot/mouse_three_methods_ncorf.final.nuc.fa')

tmp_pep_mouse <- Biostrings::readAAStringSet('data/ncorf_annot/mouse_three_methods_ncorf.pep.fa')
tmp_pep_mouse <- tmp_pep_mouse[names(tmp_pep_mouse) %in% ncorfs_mouse$uid]
Biostrings::writeXStringSet(tmp_pep_mouse, 'data/ncorf_annot/mouse_three_methods_ncorf.final.pep.fa')
```


```{bash}
sed 's/^/chr/' human_three_methods_ncorf.final.bed > human_three_methods_ncorf.final.chr.bed
sed 's/^/chr/' mouse_three_methods_ncorf.final.bed > mouse_three_methods_ncorf.final.chr.bed
```

Exclude spurious ncORFs due to overlapping with annotated CDS regions
```{r}
# done by Tianyu Lei
# pwd: /nfs_data/zhangh/ncorf_mammals/ncorf_v2412
# pwd: data/ncorf_v2412
# here we only convert CSV to TSV
ncorf_human <- fread('data/ncorf_v2412/human_three_methods_ncorf.final.csv')
ncorf_mouse <- fread('data/ncorf_v2412/mouse_three_methods_ncorf.final.csv')
fwrite(ncorf_human, 'data/ncorf_v2412/human_three_methods_ncorf.final.tsv', sep = '\t')  # 11623
fwrite(ncorf_mouse, 'data/ncorf_v2412/mouse_three_methods_ncorf.final.tsv', sep = '\t')  # 16485
```

## human and mouse number of libraries
```{r}
library(data.table)
library(ggplot2)
library(cols4all)
library(patchwork)

theme_set(theme_classic(base_size = 12) + theme(
    axis.text = element_text(color = 'black'),
    strip.background = element_blank(),
    strip.text = element_text(size = 12),
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)))

orflevels <- c('lncORF', 'uORF', 'uoORF', 'iORF', 'doORF', 'dORF')
tofct_orflevels <- function(x, reverse = FALSE){
    x[x == 'lncRNA-ORF'] <- 'lncORF'
    if(reverse){
        factor(x, levels = rev(orflevels))
    }else{
        factor(x, levels = orflevels)
    }
}

human_lib <- read_tsv("data/library/human_data_refilter_174.tsv")
p1 <- ggplot(human_lib, aes(x = fct_rev(fct_infreq(re_tissue)))) +
  geom_histogram(stat = "count", fill = "#d15034") +
  theme_classic() +
  theme(axis.text.x = element_text(color = "black"),
        axis.text.y = element_text(color = "black")) +
  xlab("Tissue") +
  ylab("Library counts") +
  guides(fill = "none") +
  coord_flip() +
  theme(strip.background = element_blank(), 
        strip.text.x = element_blank(),
        axis.text = element_text(color = "black"),
        strip.text = element_text(size = 12),
        plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5)) +
  scale_y_continuous(position = "right") +
  xlab(NULL) 

mouse_lib <- read_tsv("data/library/mouse_data_refilter_209.tsv")
p2 <- ggplot(mouse_lib, aes(x = fct_rev(fct_infreq(re_tissue)))) +
  geom_histogram(stat = "count",fill = "#264a5f") +
  theme_classic() +
  theme(strip.background = element_blank(), 
        strip.text.x = element_blank(),
        axis.text = element_text(color = "black"),
        strip.text = element_text(size = 12),
        plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5)) +
  xlab("Tissue") +
  ylab("Library counts") +
  guides(fill = "none") +
  coord_flip() +
  theme(strip.background = element_blank(), strip.text.x = element_blank()) +
  scale_y_continuous(position = "right") +
  xlab(NULL)
p1+p2 + plot_annotation(tag_levels = "A")
ggsave("figures/ncorfs/human_and_mouse_library_counts_refilter.pdf", width = 9, height = 5)
```


## Overview of final ORFs
```{r}
ncorf_human <- fread('data/ncorf_v2412/human_three_methods_ncorf.final.tsv')
ncorf_mouse <- fread('data/ncorf_v2412/mouse_three_methods_ncorf.final.tsv')

tmp1 <- ncorf_human[, .(.N), by = .(orf_type)]
tmp2 <- ncorf_mouse[, .(.N), by = .(orf_type)]
plt <- rbind(Human = tmp1, Mouse = tmp2, idcol = 'species')
plt[, orf_type := factor(orf_type, levels=c('lncORF', 'uORF', 'uoORF', 'iORF', 'doORF', 'dORF'))]

# number of ORF types
ggplot(plt, aes(x = orf_type, y = N, fill = orf_type)) +
    geom_col(show.legend = FALSE, width = 0.75) +
    geom_text(aes(label = N), vjust = -0.2) +
    scale_fill_discrete_c4a_cat(palette = 'carto.safe') +
    facet_wrap(vars(species), scales = 'free') +
    labs(x = NULL, y = 'Number of ORFs') +
    scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
    theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1))
ggsave('figures/ncorf_overview_type_count.pdf', width = 6, height = 3)

# length distribution
plt <- rbind(Human = ncorf_human, Mouse = ncorf_mouse, idcol = 'species')
plt[, orf_type := factor(orf_type, levels=c('lncORF', 'uORF', 'uoORF', 'iORF', 'doORF', 'dORF'))]

ggplot(plt, aes(x = orf_len/3 - 1, color = orf_type)) +
    stat_ecdf() +
    facet_wrap(vars(species), scales = 'free') +
    scale_color_discrete_c4a_cat(palette = 'carto.safe') +
    scale_x_log10() +
    labs(x = 'ORF length (amino acids)', y = 'Cumulative fractions', color = NULL)
ggsave('figures/ncorf_length_by_type_ecdf.pdf', width = 7, height = 3)


plt[, {
    p <- sapply(orflevels, function(ot1){
        sapply(orflevels, function(ot2){
            wilcox.test(orf_len[orf_type == ot1], orf_len[orf_type == ot2])$p.value
        })
    })
    p <- as.data.table(p)
    setnames(p, orflevels)
    p[, orf_type := orflevels]
    p[]
}, by = .(species)]


# start codon usage
ggplot(plt, aes(y = orf_type, fill = start_codon)) +
    geom_bar(position = 'fill') +
    facet_wrap(vars(species)) +
    scale_fill_discrete_c4a_cat('carto.safe') +
    labs(y = NULL, x = 'Fraction', fill = NULL)
ggsave('figures/ncorf_start_codon_usage.pdf', width = 6, height = 3)

# relative position in the coding sequence
ggplot(plt, aes(x = tstart/tx_len)) +
    geom_histogram(binwidth = 0.04) +
    facet_grid(rows = vars(orf_type), cols = vars(species), scales = 'free')

ggplot(plt, aes(x = tstart/tx_len, y = after_stat(density), color = orf_type)) +
    geom_freqpoly(binwidth = 0.04) +
    scale_color_discrete_c4a_cat('carto.safe') +
    facet_wrap(vars(species), scales = 'free_y') +
    labs(x = 'ncORF start position / transcript length', y = 'Density', color = NULL)
ggsave('figures/ncorf_start_relative_position.pdf', width = 7, height = 3)
```


## Overlap with Ribo-Seq ORFs
```{r}
library(data.table)
library(ggplot2)
library(readxl)
library(writexl)
library(stringr)

num_percent <- function(x, p){
    str_c(scales::number(x, big.mark = ','), '\n(', scales::percent(p, accuracy = 0.1), ')')
}
```

```{r}
ncorf_human <- fread('data/ncorf_v2412/human_three_methods_ncorf.final.tsv')
ncorf_mouse <- fread('data/ncorf_v2412/mouse_three_methods_ncorf.final.tsv')

ncorf_gencode <- fread('../ncorf_catalog/data/Mudge2022/orfs_mapped_representative.tsv')
ncorf_gencode[, uid_start := str_c(chrom, gstart, strand, sep = '_')]
ncorf_gencode[, uid_end := str_c(chrom, gend, strand, sep = '_')]

ncorf_human[ncorf_gencode, `:=`(gencode_s = i.orf_id, tier_s = i.tier), on = .(uid_start)]
ncorf_human[ncorf_gencode, `:=`(gencode_e = i.orf_id, tier_e = i.tier), on = .(uid_end)]

ncorf_human[, `:=`(gencode = gencode_s, tier = tier_s)]
ncorf_human[is.na(gencode_s), `:=`(gencode = gencode_e, tier = tier_e)]
ncorf_human[!is.na(gencode_s) & !is.na(gencode_e), `:=`(
    gencode = ifelse(tier_s < tier_e, gencode_s, gencode_e),
    tier = ifelse(tier_s < tier_e, tier_s, tier_e))]
ncorf_human[, c('gencode_s', 'gencode_e', 'tier_s', 'tier_e') := NULL]
ncorf_human[ncorf_gencode, group := i.group, on = .(gencode = orf_id)]

ncorf_human[, table(tier, useNA = 'ifany')]
# Tier 1A Tier 1B Tier 2A Tier 2B  Tier 3  Tier 4    <NA> 
#       5     441      13     648      31    2356    8129

ncorf_human[, table(str_remove(tier, '(A|B)$'), useNA = 'ifany')]
# Tier 1 Tier 2 Tier 3 Tier 4   <NA> 
#    446    661     31   2356   8129

ncorf_human[, table(group, useNA = 'ifany')]
# phase1 single   <NA> 
#   2266   1228   8129

ncorf_gencode[, found := orf_id %in% ncorf_human$gencode]
ncorf_gencode[, table(tier, found)]
#           found
# tier      FALSE TRUE
#   Tier 1A     0    5
#   Tier 1B   136  441
#   Tier 2A     7   13
#   Tier 2B   363  648
#   Tier 3     47   31
#   Tier 4   2900 2356

ncorf_gencode[, tier_short := str_remove(tier, '(A|B)$')]
ncorf_gencode[, table(tier_short, found)]
#  tier_short FALSE TRUE
#     Tier 1   136  446
#     Tier 2   370  661
#     Tier 3    47   31
#     Tier 4  2900 2356

plt <- as.data.table(ncorf_gencode[, table(tier_short, found)])
plt[, prop := N/sum(N), by = .(tier_short)]

ggplot(plt, aes(x = tier_short, y = N, fill = found)) +
    geom_col(position = 'fill', width = 0.85) +
    geom_text(aes(label = num_percent(N, prop)),
              position = position_fill(vjust = .5)) +
    scale_fill_manual(values = c('#A6CEE3', '#B2DF8A'),
                      breaks = c(F, T), labels = c('Not found', 'Found')) +
    scale_y_continuous(labels = scales::percent,
                       expand = expand_scale(mult = c(0, 0.05))) +
    labs(x = NULL, y = 'Proportion of ORFs', fill = NULL) +
    theme_classic(base_size = 12) +
    theme(axis.text = element_text(color = 'black'),
          legend.position = 'top')
ggsave('figures/overlap_with_GENCODE_ORFs_tier.pdf', width = 4, height = 3)

ncorf_gencode[, table(group, found)]
#          found
# group    FALSE TRUE
#   phase1   731 2266
#   single  2722 1228

plt <- as.data.table(ncorf_gencode[, table(group, found)])
plt[, prop := N/sum(N), by = .(group)]

ggplot(plt, aes(x = group, y = N, fill = found)) +
    geom_col(position = 'fill', width = 0.85) +
    geom_text(aes(label = num_percent(N, prop)),
              position = position_fill(vjust = .5)) +
    scale_fill_manual(values = c('#A6CEE3', '#B2DF8A'),
                      breaks = c(F, T), labels = c('Not found', 'Found')) +
    scale_y_continuous(labels = scales::percent,
                       expand = expand_scale(mult = c(0, 0.05))) +
    labs(x = NULL, y = 'Proportion of ORFs', fill = NULL) +
    theme_classic(base_size = 12) +
    theme(axis.text = element_text(color = 'black'),
          legend.position = 'top')
ggsave('figures/overlap_with_GENCODE_ORFs_group.pdf', width = 3, height = 3)
```


## Overlap with MS-ORFs we compiled
```{r}
ms_ncorf <- fread('../ncorf_benchmark/results/human_mouse_orfs_with_ms_evidence_LTY_clean.tsv')
ms_ncorf[, uid_start := str_c(chrom, gstart, strand, sep = '_')]
ms_ncorf[, uid_end := str_c(chrom, gend, strand, sep = '_')]

# tag ncORFs with MS evidence
ncorf_human[ms_ncorf, wms := i.uuid, on = .(uid_start)]
ncorf_human[ms_ncorf, wms := i.uuid, on = .(uid_end)]

ncorf_mouse[ms_ncorf, wms := i.uuid, on = .(uid_start)]
ncorf_mouse[ms_ncorf, wms := i.uuid, on = .(uid_end)]

ms_ncorf[, found := uuid %in% c(ncorf_human$wms, ncorf_mouse$wms)]

table(ms_ncorf$species)
# human mouse 
#  3494   873 

ms_ncorf[, table(species, found)]
#         found
# species FALSE TRUE
#   human  1940 1554
#   mouse   283  590

plt <- as.data.table(ms_ncorf[, table(species, found)])
plt[, species := str_to_title(species)]
plt[, prop := N/sum(N), by = .(species)]

ggplot(plt, aes(x = species, y = N, fill = found)) +
    geom_col(position = 'fill', width = 0.85) +
    geom_text(aes(label = num_percent(N, prop)),
              position = position_fill(vjust = .5)) +
    scale_fill_manual(values = c('#A6CEE3', '#B2DF8A'),
                      breaks = c(F, T), labels = c('Not found', 'Found')) +
    scale_y_continuous(labels = scales::percent,
                       expand = expand_scale(mult = c(0, 0.05))) +
    labs(x = NULL, y = 'Proportion of ORFs', fill = NULL) +
    theme_classic(base_size = 12) +
    theme(axis.text = element_text(color = 'black'),
          legend.position = 'top')
ggsave('figures/overlap_with_JGG_MS_ncORFs.pdf', width = 3, height = 3)

ncorf_human[, table(is.na(wms))]
# FALSE  TRUE 
#  1554 10069

ncorf_mouse[, table(is.na(wms))]
#  FALSE  TRUE 
#    590 15895

ncorf_human[, table(!is.na(wms) | readr::parse_number(tier) %in% c(1, 2, 3))]
# FALSE  TRUE 
#  9535  2088

ncorf_human[, table(wms = !is.na(wms), tier123 = readr::parse_number(tier) %in% c(1, 2, 3))]
#          tier123
# wms      FALSE TRUE
#    FALSE  9535  534
#    TRUE    950  604

ncorf_human[is.na(wms) & is.na(gencode)]  # 7580 / 11623 = 0.6521552
```

## A combined dataset for downstream analysis
```{r}
# MS evidence
ncorf_human[, ms := readr::parse_number(tier) %in% c(1, 2, 3) | !is.na(wms)]
ncorf_mouse[, ms := !is.na(wms)]

ncorf_human_cdsovlp <- fread('data/ncorf_annot/human_three_methods_ncorf.cds_overlap.tsv')
ncorf_human_cdsovlp <- ncorf_human_cdsovlp[V13 > 0]
ncorf_human[, cds_ovlp := uid %in% ncorf_human_cdsovlp$V4]

ncorf_human[, table(cds_ovlp)]
# "cds_ovlp
# FALSE  TRUE 
#  8727  2896

ncorf_mouse_cdsovlp <- fread('data/ncorf_annot/mouse_three_methods_ncorf.cds_overlap.tsv')
ncorf_mouse_cdsovlp <- ncorf_mouse_cdsovlp[V13 > 0]
ncorf_mouse[, cds_ovlp := uid %in% ncorf_mouse_cdsovlp$V4]

ncorf_mouse[, table(cds_ovlp)]
#  cds_ovlp
# FALSE  TRUE 
# 12120  4365

# Phylogenetic signals
ncorf_cons <- fread('results/ncorfs_bls_phylocsf.tsv')
ncorf_cons <- ncorf_cons[method == 'ASR']

ncorf_human <- ncorf_human[ncorf_cons[, !"species"], on = .(uid), nomatch = 0]
ncorf_mouse <- ncorf_mouse[ncorf_cons[, !"species"], on = .(uid), nomatch = 0]

## export
fwrite(ncorf_human, 'data/ncorf_v2412/human_three_methods_ncorf.final.meta.tsv', sep = '\t')
fwrite(ncorf_mouse, 'data/ncorf_v2412/mouse_three_methods_ncorf.final.meta.tsv', sep = '\t')

# export supplementary table
tmp <- rbind(Human = ncorf_human, Mouse = ncorf_mouse, idcol = 'species', fill = TRUE)
tmp[, c('gstart', 'gend') := tstrsplit(uid, '_', fixed=TRUE, type.convert=TRUE)[2:3]]
tmp <- tmp[, .(species, orf_id = uid, orf_type, orf_len, start_codon, chromosome = chrom,
               strand, genomic_start = gstart, genomic_end = gend, gene_id, gene_biotype,
               representative_transcript = tx_name, transcript_start = tstart, transcript_end = tend,
               gencode_id = gencode, gencode_group = group, gencode_tier = tier)]
writexl::write_xlsx(tmp, 'results/Table_ncORF_annotation.xlsx')
```

