---
title: "Analysis of putative ncORF-encoded microproteins"
editor: source
editor_options: 
  chunk_output_type: console
---

## Analysis
```{r}
library(data.table)
library(ggplot2)
library(stringr)
library(cols4all)
library(patchwork)

theme_set(theme_classic(base_size = 12) + theme(
    axis.text = element_text(color = 'black'),
    strip.background = element_blank(),
    strip.text = element_text(size = 12),
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)))

orflevels <- c('lncORF', 'uORF', 'uoORF', 'iORF', 'doORF', 'dORF')
tofct_orflevels <- function(x, reverse = FALSE){
    x[x == 'lncRNA-ORF'] <- 'lncORF'
    if(reverse){
        factor(x, levels = rev(orflevels))
    }else{
        factor(x, levels = orflevels)
    }
}
```

## CDS overlapping ORFs
find ORFs overlapping with CDSs, no matter which strand
```{bash}
# extract and merge CDS regions
# pwd: /nfs_data/zhangh/ncorf_mammals/seqfeatures
gppy convert2bed -g /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf.gz -t cds >Homo_sapiens.GRCh38.107.cds.bed
bedtools bed12tobed6 -i Homo_sapiens.GRCh38.107.cds.bed -n | bedtools sort | bedtools merge >Homo_sapiens.GRCh38.107.cds.merge.bed

gppy convert2bed -g /nfs_data/database/ref_genomes/mouse_GRCm39/ens107/Mus_musculus.GRCm39.107.gtf.gz -t cds >Mus_musculus.GRCm39.107.cds.bed
bedtools bed12tobed6 -i Mus_musculus.GRCm39.107.cds.bed -n | bedtools sort | bedtools merge >Mus_musculus.GRCm39.107.cds.merge.bed

# flag CDS-overlapping ORFs
bedtools intersect -a ../data/human_three_methods_ncorf.bed -b Homo_sapiens.GRCh38.107.cds.merge.bed -split -c >../data/human_three_methods_ncorf.cds_overlap.tsv
bedtools intersect -a ../data/mouse_three_methods_ncorf.bed -b Mus_musculus.GRCm39.107.cds.merge.bed -split -c >../data/mouse_three_methods_ncorf.cds_overlap.tsv
```

## TE overlapping ORFs
```{bash}
# /nfs_data/zhangh/ncorf_mammals/data
bedtools bed12tobed6 -i mouse_three_methods_ncorf_chr.bed | bedtools intersect -wo -a - -b /nfs_data/database/ref_genomes/mouse_GRCm39/mm39_repeatmasker.bed >mouse_three_methods_ncorf.repeat_overlap.bed
bedtools bed12tobed6 -i human_three_methods_ncorf_chr.bed | bedtools intersect -wo -a - -b /nfs_data/database/ref_genomes/human_GRCh38p13/hg38_repeatmasker.bed >human_three_methods_ncorf.repeat_overlap.bed
```

## Prediction
### Domain
```{r}
ncorf_human <- fread('data/ncorf_annot/human_three_methods_ncorf.final.tsv')
ncorf_mouse <- fread('data/ncorf_annot/mouse_three_methods_ncorf.final.tsv')

# repeat overlapping ORFs
rmsk_human <- fread('data/hg38_repeatmasker.tsv.gz')
rmsk_human <- unique(rmsk_human[, .(repName, repClass, repFamily)])
rmsk_mouse <- fread('data/mm39_repeatmasker.tsv.gz')
rmsk_mouse <- unique(rmsk_mouse[, .(repName, repClass, repFamily)])

ncorf_rmsk_human <- fread('data/ncorf_annot/human_three_methods_ncorf.repeat_overlap.bed', header = FALSE)
ncorf_rmsk_mouse <- fread('data/ncorf_annot/mouse_three_methods_ncorf.repeat_overlap.bed', header = FALSE)
ncorf_rmsk_human[rmsk_human, `:=`(repclass = i.repClass, repfamily = i.repFamily), on = .(V10 = repName)]
ncorf_rmsk_mouse[rmsk_mouse, `:=`(repclass = i.repClass, repfamily = i.repFamily), on = .(V10 = repName)]

te_class <- c('DNA', 'LINE', 'LTR', 'Retroposon', 'SINE', 'Unknown')
ncorf_rmsk_human <- ncorf_rmsk_human[repclass %in% te_class, .(
    replen = sum(V13), repclass = str_c(unique(repclass), collapse = ',')), by = .(uid = V4)]
ncorf_rmsk_mouse <- ncorf_rmsk_mouse[repclass %in% te_class, .(
    replen = sum(V13), repclass = str_c(unique(repclass), collapse = ',')), by = .(uid = V4)]

ncorf_human[, `:=`(replen = 0, repclass = NA_character_)]
ncorf_human[ncorf_rmsk_human, `:=`(replen = i.replen, repclass = i.repclass), on = .(uid)]
ncorf_mouse[, `:=`(replen = 0, repclass = NA_character_)]
ncorf_mouse[ncorf_rmsk_mouse, `:=`(replen = i.replen, repclass = i.repclass), on = .(uid)]
```

# InterProScan
```{bash}
Interproscan/interproscan-5.64-96.0/interproscan.sh -i data/predict_output/human_three_methods_ncorf.pep.fa -f tsv -cpu 8 -t p
Interproscan/interproscan-5.64-96.0/interproscan.sh -i data/predict_output/human_three_methods_ncorf.pep.fa -f tsv -cpu 8 -t p
```

```{r}
pfam_clan <- fread('data/Pfam-A.clans.tsv.gz', header = FALSE)
setnames(pfam_clan, c('signature_acc', 'clan_acc', 'clan_id', 'clan_pfam', 'clan_desp'))
pfam_clan[clan_id == '', `:=`(clan_acc = clan_desp, clan_id = clan_desp)]
pfam_clan[, clan_despu := clan_desp[1], by = .(clan_id)]  # assign a unique description for each clan ID

ips_human <- fread('data/ncorf_annot/human_three_methods_ncorf.interproscan.tsv',
                   sep='\t', quote = '')
setnames(ips_human, c('uid', 'md5_digest', 'seq_len', 'analysis', 'signature_acc',
                      'signature_desp', 'start_location', 'stop_location', 'score',
                      'status', 'date', 'interpro_acc', 'interpro_desp'))
ips_human <- ips_human[uid %in% ncorf_human$uid]
ips_human <- merge(ncorf_human[, .(uid, orf_type, replen, repclass)], ips_human, by = 'uid')
ips_human[pfam_clan, `:=`(
    clan_acc = i.clan_acc, clan_id = i.clan_id,
    clan_desp = i.clan_desp, clan_despu = i.clan_despu), on = .(signature_acc)]

ips_mouse <- fread('data/ncorf_annot/mouse_three_methods_ncorf.interproscan.tsv',
                   sep='\t', quote = '')
setnames(ips_mouse, c('uid', 'md5_digest', 'seq_len', 'analysis', 'signature_acc',
                      'signature_desp', 'start_location', 'stop_location', 'score',
                      'status', 'date', 'interpro_acc', 'interpro_desp'))
ips_mouse <- ips_mouse[uid %in% ncorf_mouse$uid]
ips_mouse <- merge(ncorf_mouse[, .(uid, orf_type, replen, repclass)], ips_mouse, by = 'uid')
ips_mouse[pfam_clan, `:=`(
    clan_acc = i.clan_acc, clan_id = i.clan_id,
    clan_desp = i.clan_desp, clan_despu = i.clan_despu), on = .(signature_acc)]


table(ips_human$analysis)
table(ips_mouse$analysis)

# protein domain is mostly covered in Pfam
tmp_db <- 'Pfam'
ips_human[analysis == tmp_db][, uniqueN(uid)]  # 329/12469 = 0.02638544
ips_mouse[analysis == tmp_db][, uniqueN(uid)]  # 196/16960 = 0.0115566

tmp <- tibble::tribble(
    ~ species, ~ type, ~n,
    'Human', 'No Pfam domain', 12140,
    'Human', 'w/ Pfam domain', 329,
    'Mouse', 'No Pfam domain', 16764,
    'Mouse', 'w/ Pfam domain', 196
)
setDT(tmp)
tmp[, prop := n/sum(n), by = .(species)]
tmp <- tmp[order(species, -prop)]
tmp[, y := cumsum(prop) - prop/2, by = .(species)]

ggplot(tmp, aes(x = '', y = prop, fill = type)) +
    geom_col(width = 1) +
    geom_text(aes(y = y, label = scales::percent(prop, accuracy = 0.01))) +
    facet_wrap(vars(species), ncol = 1) +
    coord_polar('y', start = 0, direction = 1) +
    scale_fill_discrete_c4a_cat('carto.safe', name = NULL) +
    theme_void()
ggsave('figures/ncorf_prop_with_pfam_domain_piechart.pdf', width = 3, height = 6)


tmp1 <- ips_human[analysis == 'Pfam'][, .(N = uniqueN(uid)), by = .(clan_id, clan_acc, clan_despu)][order(-N)]
tmp2 <- ips_mouse[analysis == 'Pfam'][, .(N = uniqueN(uid)), by = .(clan_id, clan_acc, clan_despu)][order(-N)]
ips_pfam_summary <- rbind(Human = tmp1, Mouse = tmp2, idcol = 'species')
tmp <- ips_pfam_summary[, sum(N), by = .(clan_id, clan_acc, clan_despu)][order(-V1)]
# tmp <- tmp[V1 >= 10]

# manually updated description for top clans:
# seach example: https://www.ebi.ac.uk/interpro/set/pfam/CL0063/
claninfo <- tibble::tribble(
    ~ clan_acc, ~ clan_info,
    'CL0361', 'Zinc finger, C2H2 type',
    'KRAB box', 'KRAB box',
    'CL0020', 'Tetratricopeptide-like repeat',
    'CL0159', 'Ig-like fold',
    'CL0063', 'Rossmann-fold, NAD+ binding',
    'CL0123', 'Helix-turn-helix, DNA binding'
)
claninfo <- as.data.table(claninfo)
ips_pfam_summary[claninfo, clan_info := i.clan_info, on = .(clan_acc)]

plt <- ips_pfam_summary[clan_acc %in% claninfo$clan_acc]
plt[, clan_info := factor(clan_info, levels = rev(claninfo$clan_info))]

ggplot(plt, aes(x = N, y = clan_info, fill = species)) +
    geom_col() +
    scale_fill_brewer(palette = 'Set1') +
    labs(x = 'Number of ncORFs', y = NULL, fill = NULL) +
    theme(legend.position = c(0.95, 0.05),
          legend.justification = c(1, 0)) +
    scale_x_continuous(expand = expansion(mult = c(0, 0.05)))
ggsave('figures/ncorf_pfam_major_domains.pdf', width = 4, height = 3)

ncorf_pfam_human <- ips_human[analysis == 'Pfam', .(
    signatures = str_c(unique(signature_acc), collapse = ',')), by = .(uid)]
ncorf_pfam_mouse <- ips_mouse[analysis == 'Pfam', .(
    signatures = str_c(unique(signature_acc), collapse = ',')), by = .(uid)]

ncorf_human[ncorf_pfam_human, pfam := i.signatures, on = .(uid)]
ncorf_mouse[ncorf_pfam_mouse, pfam := i.signatures, on = .(uid)]

ncorf_human[, fisher.test(table(!is.na(pfam), replen > 0))]  # p-value = 6.439e-06
ncorf_human[, addmargins(table(!is.na(pfam), replen > 0))]
#         FALSE  TRUE   Sum
#   FALSE 10941  1199 12140
#   TRUE    269    60   329
#   Sum   11210  1259 12469

ncorf_mouse[, fisher.test(table(!is.na(pfam), replen > 0))]  # p-value = 1.605e-13
ncorf_mouse[, addmargins(table(!is.na(pfam), replen > 0))]
#         FALSE  TRUE   Sum
#   FALSE 15182  1582 16764
#   TRUE    141    55   196
#   Sum   15323  1637 16960

plt <- rbind(
    Human = ncorf_human[!is.na(pfam), .N, by = .(orf_type, te = ifelse(replen > 0, 'TE-overlapping', 'Non-ovelapping'))],
    Mouse = ncorf_mouse[!is.na(pfam), .N, by = .(orf_type, te = ifelse(replen > 0, 'TE-overlapping', 'Non-ovelapping'))],
    idcol = 'species')
plt[, orf_type := tofct_orflevels(orf_type)]
plt[, orf_type := forcats::fct_rev(orf_type)]

ggplot(plt, aes(y = orf_type, x = N, fill = te)) +
    geom_col(position = 'stack') +
    facet_wrap(~species, scales = 'free_x', ncol = 2) +
    scale_fill_brewer(palette = 'Dark2') +
    scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +
    labs(y = NULL, x = 'Number of ncORFs with Pfam domains', fill = NULL)
ggsave('figures/ncorf_pfam_TE_derived_prop.pdf', width = 6, height = 3)
    

plt <- rbind(Human = ncorf_human, Mouse = ncorf_mouse, idcol = 'species')
plt[, grp := ifelse(is.na(pfam), 'Without Pfam domains', 'With Pfam domains')]
plt[, orf_type := factor(orf_type, levels = orflevels)]

plt2 <- plt[, .(
    p = wilcox.test(orf_len[grp == 'Without Pfam domains'], orf_len[grp == 'With Pfam domains'])$p.value
), keyby = .(species, orf_type)]
plt2[, p2 := scales::scientific(p, digits = 2, prefix='italic(P)==')]
"   species orf_type            p
 1:   Human   lncORF 5.561032e-67
 2:   Human     uORF 2.341843e-30
 3:   Human    uoORF 4.218671e-10
 4:   Human     iORF 9.852631e-04
 5:   Human    doORF 4.376884e-04
 6:   Human     dORF 4.716927e-09
 7:   Mouse   lncORF 1.186818e-64
 8:   Mouse     uORF 4.481900e-13
 9:   Mouse    uoORF 2.434672e-05
10:   Mouse     iORF 3.775865e-03
11:   Mouse    doORF 8.229540e-03
12:   Mouse     dORF 2.902790e-12"

ggplot(plt, aes(x = orf_len/3 - 1)) +
    geom_density(aes(fill = grp), position = 'identity', alpha = 0.6) +
    geom_text(data = plt2, aes(x = 20, y = Inf, label = p2), vjust = 1, parse = TRUE) +
    facet_grid(vars(orf_type), vars(species)) +
    scale_fill_discrete_c4a_cat('carto.safe') +
    scale_x_log10(breaks=c(10, 100, 1000)) +
    labs(x = 'ORF length (AA)', y = 'Density', fill = NULL) +
    theme(axis.text.y = element_blank(),
          strip.text.y = element_text(angle = 0),
          legend.position = 'bottom')
ggsave('figures/ncorf_pfam_vs_orflen.pdf', width = 8, height = 6)
```

### Intrinsically discordered regions (IDRs)
## IUPred3 ncORFs
```{bash}
# human
## split pep fasta single fa
awk  '/^>/{if(x){close(x)}; x=substr($0,2)".fa"; print >x;next}{print >> x}' ../human_three_methods_ncorf.pep.fa
## IUPred3
for i in *.fa; do echo python /home/admin/local/iupred3/iupred3.py $i short -s no \>${i}_short.tsv; done >IUPred_human_ncorf_short.sh
## summarise
Rscript summarise_IUPred3_short.R human_IUPred_ncorf/ human_ncorf_sum_IUPred_short.tsv human_three_methods_ncorf.IUPred3short.tsv

# mouse
## split pep fasta single fa
awk '/^>/{if(x){close(x)}; x=substr($0,2)".fa"; print >x;next}{print >> x}' ../mouse_three_methods_ncorf.pep.fa
## IUPred3
for i in *.fa; do echo python /home/admin/local/iupred3/iupred3.py $i short -s no \>${i}_short.tsv; done >IUPred_mouse_ncorf_short.sh
## summarise
Rscript summarise_IUPred3_short.R mouse_ncorf_fasta/ mouse_ncorf_sum_IUPred_short.tsv mouse_three_methods_ncorf.IUPred3short.tsv
```

## IUPred3 CDSs
```{bash}
# human
## all CDS peptide sequence
zcat /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.pep.all.fa.gz |sed 's/pep.*//g'|sed 's/\.*//g' >Homo_sapiens.GRCh38.pep.all.fa
```

```{r}
##  R (extract representative transcripts peptide sequence)
pep <- readAAStringSet("Homo_sapiens.GRCh38.pep.all.fa")
rep_pep <- read_tsv("/nfs_data/zhangh/ncorf_mammals/data/Homo_sapiens.GRCh38.107.txinfo.rep.pcg.tsv")
rep_fa <- pep[names(pep) %in% rep_pep$protein_id]
writeXStringSet(rep_fa, "Homo_sapiens.GRCh38.107.txinfo.rep.pcg.fa")
```

```{bash}
## split fasta
awk  '/^>/{if(x){close(x)}; x=substr($0,2)".fa"; print >x;next}{print >> x}' ../Homo_sapiens.GRCh38.107.txinfo.rep.pcg.fa
Rscript summarise_IUPred3_short.R human_IUPred_ncorf/ human_cds_sum_IUPred_short.tsv Homo_sapiens.GRCh38.107.txinfo.rep.pcg.IUPred3short.tsv.gz
# mouse
## all CDS peptide sequence
zcat /nfs_data/database/ref_genomes/mouse_GRCm39/ens107/Mus_musculus.GRCm39.pep.all.fa.gz |sed 's/pep*//g' |sed 's/\..*//g' >Mus_musculus.GRCm39.pep.all.fa
```

```{r}
## R (extract representative transcripts peptide sequence)
pep <- readAAStringSet("Mus_musculus.GRCm39.pep.all.fa")
rep_pep <- read_tsv("/nfs_data/zhangh/ncorf_mammals/data/Mus_musculus.GRCm39.107.txinfo.rep.pcg.tsv")
rep_fa <- pep[names(pep) %in% rep_pep$protein_id]
writeXStringSet(rep_pep, "Mus_musculus.GRCm39.107.txinfo.rep.pcg.fa")
```

```{bash}
## split fasta
awk '/^>/{if(x){close(x)}; x=substr($0,2)".fa"; print >x;next}{print >> x}' ../Mus_musculus.GRCm39.107.txinfo.rep.pcg.fa
Rscript summarise_IUPred3_short.R mouse_IUPred_ncorf/ mouse_cds_sum_IUPred_short.tsv Mus_musculus.GRCm39.107.txinfo.rep.pcg.IUPred3short.tsv.gz
```


```{r}
parse_iupred <- function(path){
    iupred <- fread(path, header = TRUE)
    iupred[, {
        scores <- str_split(iupred2, fixed(','))[[1]]
        scores <- as.numeric(scores)
        list(mean = mean(scores), median = median(scores),
             frac = sum(scores > 0.5) / length(scores))
    }, by = .(id)]
}
iupred_human <- parse_iupred('data/ncorf_annot/human_three_methods_ncorf.IUPred3short.tsv')
iupred_mouse <- parse_iupred('data/ncorf_annot/mouse_three_methods_ncorf.IUPred3short.tsv')
iupred_cds_human <- parse_iupred('data/ncorf_annot/Homo_sapiens.GRCh38.107.txinfo.rep.pcg.IUPred3short.tsv.gz')
iupred_cds_mouse <- parse_iupred('data/ncorf_annot/Mus_musculus.GRCm39.107.txinfo.rep.pcg.IUPred3short.tsv.gz')

iupred_ncorf <- rbind(Human = iupred_human[id %in% ncorf_human$uid],
                      Mouse = iupred_mouse[id %in% ncorf_mouse$uid], idcol = 'species')
iupred_cds <- rbind(Human = iupred_cds_human, Mouse = iupred_cds_mouse, idcol = 'species')

plt <- rbind(ncORF = iupred_ncorf, CDS = iupred_cds, idcol = 'type')
fwrite(plt, 'results/ncorf_iupred3_processed.tsv', sep = '\t')

ggplot(plt, aes(x = frac, fill = type)) +
    geom_density(position = 'identity', alpha = 0.6) +
    scale_fill_discrete_c4a_cat('carto.vivid') +
    facet_wrap(vars(species), scales = 'free') +
    labs(x = 'Fraction of intrinsically disordered residues', y = 'Density', fill = NULL) +
    annotate('text', x = 0.5, y = Inf, vjust=4, label = 'italic(P) < 10^-308', parse = TRUE)
ggsave('figures/ncorf_iupred_IDR_vs_cds_density.pdf', width = 6, height = 3)
ggsave('figures/ncorf_iupred_IDR_vs_cds_density2.pdf', width = 7.5, height = 2.5)

ggplot(plt, aes(x = frac, color = str_c(type, ' ', species))) +
    stat_ecdf() +
    scale_color_brewer(palette = 'Dark2') +
    scale_x_continuous(expand = expansion(add = c(0, 0.01)),
                       breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1.0)) +
    labs(x = 'Intrinsically disordered fraction',
         y = 'Cumulative fraction of ORFs', color = NULL) +
    theme(legend.position = c(0.98, 0.02),
          legend.justification = c(1, 0),
          legend.background = element_blank())
ggsave('figures/ncorf_iupred_IDR_vs_cds_ecdf.pdf', width = 6, height = 3)

plt[, wilcox.test(frac[type == 'CDS'], frac[type == 'ncORF'])$p.value, by = .(species)]
# 1:   Human  0
# 2:   Mouse  0

median_ci <- function(x, nboot=1000, alpha=0.05){
    med <- median(x)
    boot_med <- replicate(nboot, median(sample(x, replace=TRUE)))
    ci <- quantile(boot_med, c(alpha, 1 - alpha/2))
    return(list(median = med, lower = ci[1], upper = ci[2]))
}


tmp <- plt[, median_ci(frac), by = .(type, species)]
# https://stats.stackexchange.com/questions/99829/how-to-obtain-a-confidence-interval-for-a-percentile/284970
tmp[, med_se := (upper - lower)/2]
#      type species    median     lower     upper      med_se
#    <char>  <char>     <num>     <num>     <num>       <num>
# 1:  ncORF   Human 0.6000000 0.5849057 0.6153846 0.015239478
# 2:  ncORF   Mouse 0.5882353 0.5769231 0.6051094 0.014093166
# 3:    CDS   Human 0.1459459 0.1437126 0.1488779 0.002582662
# 4:    CDS   Mouse 0.1272727 0.1247848 0.1296296 0.002422435
```

### DeepLoc 2.0
No GPU on our server, load model to CPU as suggested. The original deeploc2 scripts were modified as follows.
```{python}
# diff /home/admin/local/deeploc-2.0/deeploc2_package/DeepLoc2/model.py model.py.bak
# 135,136c135,136

# from
self.subcel_clfs = [ESM1bFrozen.load_from_checkpoint(pkg_resources.resource_filename(__name__,f"models/models_esm1b/{i}_1Layer.ckpt")).eval() for i in range(5)]
self.signaltype_clfs = [SignalTypeMLP.load_from_checkpoint(pkg_resources.resource_filename(__name__,f"models/models_esm1b/signaltype/{i}.ckpt")).eval() for i in range(5)]
# to
self.subcel_clfs = [ESM1bFrozen.load_from_checkpoint(pkg_resources.resource_filename(__name__,f"models/models_esm1b/{i}_1Layer.ckpt"), map_location=torch.device('cpu')).eval() for i in range(5)]
self.signaltype_clfs = [SignalTypeMLP.load_from_checkpoint(pkg_resources.resource_filename(__name__,f"models/models_esm1b/signaltype/{i}.ckpt"), map_location=torch.device('cpu')).eval() for i in range(5)]
```

run prediction
```{bash}
# /nfs_data/zhangh/ncorf_mammals/data
# copy model checkpoint links
mkdir -p ~/.cache/torch/hub/
cp -r /home/admin/.cache/torch/hub/checkpoints/ ~/.cache/torch/hub/

# load deeploc2 pipenv
bash
source /home/admin/local/deeploc-2.0/.venv/bin/activate

# run prediction
deeploc2 -f human_three_methods_final_ncorfs.pep.fa -o deeploc2_human -m Fast
deeploc2 -f mouse_three_methods_final_ncorfs.pep.fa -o deeploc2_mouse -m Fast

# rename
mv deeploc2_human/results_20231006-185307.csv human_three_methods_ncorfs.deeploc2.csv
mv deeploc2_mouse/results_20231006-194907.csv mouse_three_methods_ncorfs.deeploc2.csv
```

### Subcellular localization
```{r}
parse_deeploc2 <- function(path){
    deeploc2 <- fread(path)
    deeploc2[, Mitochondrion := pmax(Mitochondrion, Plastid)]
    deeploc2[, c('Plastid', 'Localizations') := NULL]
    setnames(deeploc2, c('Protein_ID', 'Signals', 'Lysosome/Vacuole'),
             c('uid', 'signals', 'Lysosome'))
    deeploc2 <- melt(
        deeploc2, id.vars = c('uid', 'signals'), variable.factor = FALSE,
        variable.name = 'location', value.name = 'prob')
    deeploc2 <- deeploc2[order(uid, signals, -prob)]
}

deeploc2_human <- parse_deeploc2('data/ncorf_annot/human_three_methods_ncorf.deeploc2.csv')
deeploc2_human <- deeploc2_human[uid %in% ncorf_human$uid]
uniqueN(deeploc2_human$uid) == nrow(ncorf_human)

deeploc2_mouse <- parse_deeploc2('data/ncorf_annot/mouse_three_methods_ncorf.deeploc2.csv')
deeploc2_mouse <- deeploc2_mouse[uid %in% ncorf_mouse$uid]
uniqueN(deeploc2_mouse$uid) == nrow(ncorf_mouse)

fwrite(deeploc2_human, 'results/ncorf_deeploc2_human_processe.tsv', sep='\t')
fwrite(deeploc2_mouse, 'results/ncorf_deeploc2_mouse_processe.tsv', sep='\t')

DEEPLOC2_P <- 0.65
locstat_human <- deeploc2_human[, .(
    max_prob = max(prob), max_loc = location[which.max(prob)],
    locs_num = sum(prob > DEEPLOC2_P), locs = str_c(location[prob > DEEPLOC2_P], collapse = ',')
), by = .(uid)]
locstat_human[, table(locs_num)]
locstat_human <- merge(locstat_human, ncorf_human[, .(uid, orf_type, orf_len)], by = 'uid')


locstat_mouse <- deeploc2_mouse[, .(
    max_prob = max(prob), max_loc = location[which.max(prob)],
    locs_num = sum(prob > DEEPLOC2_P), locs = str_c(location[prob > DEEPLOC2_P], collapse = ',')
), by = .(uid)]
locstat_mouse[, table(locs_num)]
locstat_mouse <- merge(locstat_mouse, ncorf_mouse[, .(uid, orf_type, orf_len)], by = 'uid')

locstat <- rbind(Human = locstat_human, Mouse = locstat_mouse, idcol = 'species')
plt <- locstat[, .(all = .N, confident = sum(max_prob > DEEPLOC2_P)), .(species, orf_type, max_loc)]
plt[, orf_type := tofct_orflevels(orf_type, reverse = TRUE)]

ggplot(plt, aes(y = orf_type, x = all, fill = max_loc)) +
    geom_col(position = 'fill') +
    scale_fill_discrete_c4a_cat('carto.safe') +
    facet_wrap(vars(species)) +
    labs(x = 'Fraction', y = NULL, fill = NULL) +
    theme(panel.spacing.x = unit(0.8, 'lines'))
ggsave('figures/deeploc2_maxProbLoc_summary_all.pdf', width = 7, height = 3)

ggplot(plt, aes(y = orf_type, x = confident, fill = max_loc)) +
    geom_col(position = 'fill') +
    scale_fill_discrete_c4a_cat('carto.safe') +
    facet_wrap(vars(species)) +
    labs(x = 'Fraction', y = NULL, fill = NULL) +
    theme(panel.spacing.x = unit(0.8, 'lines'))
ggsave('figures/deeploc2_maxProbLoc_summary_confident.pdf', width = 7, height = 3)

locstat[, .(total = .N, conf = sum(locs_num > 0)), by = .(species)]
#    species total conf
# 1:   Human 12469 1930
# 2:   Mouse 16960 2358

plt2 <- plt[, lapply(.SD, sum), by = .(species, orf_type), .SDcols = c('all', 'confident')]
ggplot(plt2, aes(y = orf_type, x = confident/all)) +
    geom_col() +
    facet_wrap(vars(species), scales = 'free_x') +
    labs(x = 'Fraction of ORFs w/ confident localizaiton (P > 0.65)', y = NULL, fill = NULL) +
    theme(panel.spacing.x = unit(0.8, 'lines'))
ggsave('figures/deeploc2_maxProbLoc_summary_confident_prop.pdf', width = 6, height = 3)

tmp <- copy(locstat)
tmp[, orf_type := tofct_orflevels(orf_type)]
ggplot(tmp, aes(x = max_prob)) +
    geom_density(fill = 'grey') +
    facet_grid(vars(orf_type), vars(species)) +
    labs(x = 'Maximum Probability of subcellular localizaitons', y = 'Density', fill = NULL) +
    theme(panel.spacing.x = unit(0.8, 'lines'))
ggsave('figures/deeploc2_maxProbLoc_summary_maxp.pdf', width = 6, height = 5)

```

## Datasets
- Domains: InterProScan
    - human: /nfs_data/changy/poj/ORF/human_riboseq/data_174/human_ncorf_interproscan.tsv
    - mouse: /nfs_data/changy/poj/ORF/mouse_riboseq/data_209/mouse_ncorf_interproscan.tsv
- IDR: IUPred3
    - human: /nfs_data/changy/poj/ORF/human_riboseq/data_174/human_ncorf_final_IUPred3_short.tsv
    - mouse: /nfs_data/changy/poj/ORF/mouse_riboseq/data_209/mouse_ncorf_final_IUPred3_short.tsv
- Localization: DeepLoc 2.0
    - using webserver: https://services.healthtech.dtu.dk/services/DeepLoc-2.0/
    - human: /nfs_data/changy/poj/ORF/human_riboseq/data_174/human_three_methods_ncorf.deeploc2.tsv
    - mouse: /nfs_data/changy/poj/ORF/mouse_riboseq/data_209/mouse_three_methods_ncorf.deeploc2.tsv
